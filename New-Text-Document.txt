Gradient.java

package app;
import grading.*;
import java.util.*;

public class Gradient
{
   /**
   * The entry point for the application.
   *
   * @param args The 13 grades (ordered as above). Missing grades can be entered as "NA".
   */
   public static void main(String[] args)
   {
       Filter                   paFilter;      
       Grade                    courseGrade, hwGrade, paGrade;
       GradingStrategy          courseStrategy, hwStrategy, paStrategy;
       List<Grade>              grades, hws, pas;
       Map<String, Double>      courseWeights;

       // Early exit
       if ((args == null) || (args.length != 13))
       {
           System.err.println("You must enter all 13 grades. (Use NA for missing.)");
           System.exit(1);
       }

       // Create the filter and strategy for PAs
       paFilter   = new DropFilter(true, false);
       paStrategy = new TotalStrategy();

       // Create the strategy for HWs
       hwStrategy = new TotalStrategy();

       // Create the weights and strategy for the course grade
       courseWeights = new HashMap<String, Double>();
       courseWeights.put("PAs",     0.4);
       courseWeights.put("HWs",     0.1);
       courseWeights.put("Midterm", 0.2);
       courseWeights.put("Final",   0.3);
       courseStrategy = new WeightedTotalStrategy(courseWeights);

       try
       {
           // Put the PA grades in a List
           pas = new ArrayList<Grade>();
           for (int i=0; i<6; i++)
           {
               pas.add(parseGrade("PA"+(i+1), args[i]));
           }

           // Calculate the PA grade (after filtering)
           paGrade = paStrategy.calculate("PAs", paFilter.apply(pas));

           // Put the HW grades in a List
           hws = new ArrayList<Grade>();
           for (int i=0; i<5; i++)
           {
               hws.add(parseGrade("HW"+(i+1), args[i+6]));
           }

           // Calculate the HW grade
           hwGrade = hwStrategy.calculate("HWs", hws);

           // Put all of the grades in a List
           grades = new ArrayList<Grade>();
           grades.add(paGrade);
           grades.add(hwGrade);
           grades.add(parseGrade("Midterm", args[11]));
           grades.add(parseGrade("Final",   args[12]));

           // Calculate the final grade
           courseGrade = courseStrategy.calculate("Course Grade", grades);

           // Display the final grade
           System.out.println(courseGrade.toString());      
       }
       catch (SizeException se)
       {
           System.out.println("You entered too few valid grades.");
       }
       catch (IllegalArgumentException iae)
       {
           // Should never get here since all keys should be valid
       }
   }
  
   /**
   * Construct a Grade object from a key and a String representation of
   * its value. If the String representation of the value is null or not a valid
   * double then the resulting Grade will have a missing value.
   *
   * @param key   The key for the Grade
   * @param value The String representation of the value
   * @return      The corresponding Grade object
   * @throws IllegalArgumentException if the key is invalid
   */
   private static Grade parseGrade(String key, String value) throws IllegalArgumentException
   {
       Grade result;
      
       try
       {
           Double v;
           if (value == null) v = null;
           else v = new Double(Double.parseDouble(value));
          
           result = new Grade(key, v);
       }
       catch (NumberFormatException nfe)
       {
           result = new Grade(key, null);
       }
      
       return result;
   }
}


DropFilter.java


package grading;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class DropFilter implements Filter {
  
   public boolean shouldDropLowest;
   public boolean shouldDropHighest;
   public int toBeDropped = 0;
  
   /**
   * Constructor
   */
   public DropFilter() {
       //default both to true
       this.shouldDropHighest = true;
       this.shouldDropLowest = true;
       this.toBeDropped = 2;
   }
  
   /**
   * Constructor
   * @param shouldDropLowest
   * @param shouldDropHighest
   */
   public DropFilter(boolean shouldDropLowest, boolean shouldDropHighest) {
       this.shouldDropLowest = shouldDropLowest;
       this.shouldDropHighest = shouldDropHighest;
      
       if (shouldDropLowest && !shouldDropHighest) {
           toBeDropped = 1;
       } else if (!shouldDropLowest && shouldDropHighest) {
           toBeDropped = 1;
       } else if (shouldDropLowest && shouldDropHighest) {
           toBeDropped = 2;
       } else {
           toBeDropped = 0;
       }
   }
  
   /**
   * apply() method to conform to Filter interface
   * @param grades : list of grades to filter
   * @return List<Grade> : filtered list
   */
   @Override
   public List<Grade> apply(List<Grade> grades) throws SizeException {
       if (grades == null) {
           throw new SizeException("List of grades cannot be null.");
       } else if (grades.size() < this.toBeDropped) {
           throw new SizeException("List of grades cannot be less than number to be dropped.");
       } else if (grades.size() == this.toBeDropped) {
           throw new SizeException("List of grades cannot be equal to number to be dropped.");
       } else {
          
           //result list
           List<Grade> filteredGrades = new ArrayList<Grade>();
          
           //sort grades descending
           List<Grade> sortedGrades = grades;
           Collections.sort(sortedGrades);
          
           //iterate through sorted grades
           for (int i = 0; i < sortedGrades.size(); i++) {
               if (shouldDropHighest && shouldDropLowest) {
                   //skip the highest grade and lowest grade, "drop" them
                   if (i != 0 && i != sortedGrades.size() - 1) {
                       filteredGrades.add(sortedGrades.get(i));
                   }
               } else if (shouldDropHighest) {
                   //skip the highest grade, "drop" it
                   if (i != sortedGrades.size() - 1) {
                       filteredGrades.add(sortedGrades.get(i));
                   }
               } else if (shouldDropLowest) {
                   //skip the lowest grade, "drop" it
                   if (i != 0) {
                       filteredGrades.add(sortedGrades.get(i));
                   }
               } else {
                   //copy everything over
                   filteredGrades.add(sortedGrades.get(i));
               }
           }
          
           //return result
           return filteredGrades;
          
       }
   }

}


Filter.java

package grading;
import java.util.List;

public interface Filter {
  
   //method header for this interface
   public List<Grade> apply(List<Grade> grades) throws SizeException;
}


SizeException.java

package grading;

public class SizeException extends Exception {
  
   //necessary value to conform to Exception type
   private static final long serialVersionUID = 1L;

   //constructor with no message
   public SizeException() {}
  
   //constructor that accepts a message
   public SizeException(String message) {
       super(message);
   }
}


Grade.java

package grading;

public class Grade implements Comparable<Grade> {
  
   //data fields for this class
   private String key;
   private Double value;
  
   /**
   * compareTo() method to conform to Comparable type implementation
   * @param other
   * @return int : result of comparing values of two Grades
   */
   @Override
   public int compareTo(Grade other) {
       if (this.value == null && other.value != null) {
           return -1;
       } else if (this.value == null && other.value == null) {
           return 0;
       } else if (this.value != null && other.value == null) {
           return 1;
       } else {
           //both values are non-null, continue with standard comparison
           return this.value.compareTo(other.value);
       }
   }
  
   /**
   * Constructor
   * @param key
   */
   public Grade(String key) throws IllegalArgumentException {
       //error handling
       if (key == null || key == "") {
           throw new IllegalArgumentException("Key cannot be null or empty.");
       }
      
       this.key = key;
       this.value = 0.0;
   }
  
   /**
   * Constructor (java.lang.Double)
   * @param key
   * @param value
   */
   public Grade(String key, Double value) throws IllegalArgumentException {
       //error handling
       if (key == null || key == "") {
           throw new IllegalArgumentException("Key cannot be null or empty.");
       }
      
       this.key = key;
       this.value = value;  
   }
  
   /**
   * Constructor (double)
   * @param key
   * @param value
   */
   public Grade(String key, double value) throws IllegalArgumentException {
       //error handling
       if (key == null || key == "") {
           throw new IllegalArgumentException("Key cannot be null or empty.");
       }
      
       this.key = key;
       this.value = value;
   }
  
   /**
   * Getter for key
   * @return String
   */
   public String getKey() {
       return this.key;
   }
  
   /**
   * Getter for value
   * @return Double
   */
   public Double getValue() {
       return this.value;
   }
  
   /**
   * toString() implementation
   * @return String : checks if null, then returns key/value as readable String
   */
   public String toString() {
       if (value != null) {
           return String.format("%s: %5s", key, this.value);
       } else {
           return String.format("%s: %5.1f", key, "NA");
       }
   }
}


TotalStrategy.java

package grading;
import java.util.List;

public class TotalStrategy implements GradingStrategy {
  
   public TotalStrategy() {}

   /**
   * calculate() method to conform to GradingStrategy type
   * @param key
   * @param grades
   * @return Grade : result grade
   */
   public Grade calculate(String key, List<Grade> grades) throws SizeException {
       if (grades == null) {
           throw new SizeException("List of grades cannot be null.");
       } else if (grades.isEmpty()) {
           throw new SizeException("List of grades cannot be empty.");
       } else {
           //to keep track of running total
           double runningTotal = 0.0;
          
           //iterate over grades list
           for (Grade grade : grades) {
               //add to running total
               runningTotal += grade.getValue();
           }
          
           //return result grade
           return new Grade(key, runningTotal);
       }
   }
}


GradingStrategy.java
package grading;
import java.util.List;

public interface GradingStrategy {
  
   //method header for this interface
   public Grade calculate (String key, List<Grade> grades) throws SizeException;
}


WeightedTotalStrategy.java

package grading;
import java.util.Map;
import java.util.List;
import grading.SizeException;

public class WeightedTotalStrategy implements GradingStrategy {
  
   public Map<String, Double> weights;
  
   /**
   * calculate() method to conform to GradingStrategy type
   * @param key
   * @param grades
   * @return Grade : weighted total of the list of grades
   * @throws SizeException
   */
   public Grade calculate(String key, List<Grade> grades) throws SizeException {
       if (grades == null) {
           throw new SizeException("List of grades cannot be null.");
       } else if (grades.isEmpty()) {
           throw new SizeException("List of grades cannot be empty.");
       } else {
           //to keep track of running total
           double runningTotal = 0;
          
           //iterate over grades list
           for (Grade grade : grades) {
               double weight = 1.0;
              
               //if non-nulls, get the weight
               if (weights != null && weights.get(grade.getKey()) != null) {
                   weight = weights.get(grade.getKey());
               }
              
               //if weight is less than 0, set to 0
               if (weight < 0.0) {
                   weight = 0.0;
               }
              
               //handle missing values with Missing utility
               double gradeValue = Missing.doubleValue(grade.getValue());
              
               //add to running totals
               runningTotal += (gradeValue * weight);
           }
          
           return new Grade(key, runningTotal);
       }
   }

   /**
   * Constructor (default)
   */
   public WeightedTotalStrategy() {
       this.weights = null;
   }
  
   /**
   * Constructor
   * @param weights
   */
   public WeightedTotalStrategy(Map<String, Double> weights) {
       this.weights = weights;
   }
}

Missing.java

package grading;

public class Missing {
   //default missing value constant
   public static final double DEFAULT_MISSING_VALUE = 0;
  
   /**
   * Method to check for missing value
   * @param number
   * @return double
   */
   public static double doubleValue(Double number) {
       if (number == null) {
           return DEFAULT_MISSING_VALUE;
       } else {
           return (double)number;
       }
   }
  
   /**
   * Method to check for missing value
   * @param number
   * @param missingValue
   * @return double
   */
   public static double doubleValue(Double number, double missingValue) {
       if (number == null) {
           return missingValue;
       } else {
           return (double)number;
       }
   }
}

